import org.gradle.internal.jvm.Jvm

plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'eclipse'
    id 'c'
}

repositories {
    mavenCentral()
}

application {
  mainClass = 'emu/Main'
  applicationDefaultJvmArgs = ["-Djava.library.path=" + file("${buildDir}/libs/lib65816/shared").absolutePath]
}

dependencies {
    implementation 'com.google.code.gson:gson:2.11.0'
}

sourceCompatibility = 21
targetCompatibility = 21

task generateRunScript {
    dependsOn 'classes'

    doLast {

        def scriptFile = file("$buildDir/runApp.sh")
        def debugScriptFile = file("$buildDir/debugApp.sh")

        // Access the main class from the application block
        def mainClass = application.mainClass.get()

        // Add the app's JAR and runtime dependencies to the classpath
        def appJar = tasks.jar.archiveFile.get().asFile.absolutePath
        def runtimeClasspath = configurations.runtimeClasspath.files
        def classpath = ([appJar] + runtimeClasspath.collect { it.absolutePath }).join(':')

        def cLibArgs = "-Djava.library.path=" + file("${buildDir}/libs/lib65816/shared").absolutePath

        // Write the shell script
        scriptFile.text = """#!/bin/bash
        java $cLibArgs -cp "$classpath" $mainClass "\$@"
        """
        scriptFile.setExecutable(true)
        println "Run script created at: ${scriptFile.absolutePath}"

        // Write the debug shell script
        debugScriptFile.text = """#!/bin/bash
        java $cLibArgs -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005 -cp "$classpath" $mainClass "\$@"
        """
        debugScriptFile.setExecutable(true)
        println "Debug script created at: ${debugScriptFile.absolutePath}"

    }
}

model {
    platforms {
        // x64 {
        //     architecture "x86_64"
        // }
        arm64 {
            architecture "arm64"
        }
    }

    components {
        lib65816(NativeLibrarySpec) {
					sources {
						c {
							source {
								srcDir "src/lib65816/c"
								include "**/*.c"
							}
						}
					}
            targetPlatform "arm64"
            binaries.all {
                def jvmHome = Jvm.current().javaHome
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/darwin"
                    cCompiler.args '-I', "/usr/local/include/SDL2"
                    cCompiler.args '-mmacosx-version-min=10.9'
                    linker.args '-mmacosx-version-min=10.9'
                    //linker.args '-stdlib=libc++'
									  linker.args '-L/usr/local/lib'
                    linker.args '-lSDL2'
									  //linker.args '-ljvm'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${jvmHome}/include"
                    cCompiler.args "-I${jvmHome}/include/win32"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/freebsd"
                }
            }
        }
    }
}

classes.dependsOn 'lib65816SharedLibrary'
